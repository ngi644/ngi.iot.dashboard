<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

<body>


<metal:style fill-slot="style_slot">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.css" />

    <style type="text/css">
        body, html {
            font-family: sans-serif;
        }

        .custom-style1 {
            fill: #f2ea00;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #b3ab00;
        }

        .custom-style2 {
            fill: #00b72b;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #00b72b;
        }

        .custom-style3 {
            fill: #00a0f2;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #0016dc;
        }
    </style>


</metal:style>

<metal:scripts fill-slot="javascript_head_slot"
	tal:define="navroot context/@@plone_portal_state/navigation_root_url">

    <script>
        require = undefined;
        define = undefined;
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.js"></script>
    <script src="https://cdn.mlkcca.com/v0.6.0/milkcocoa.js"></script>


</metal:scripts>

<metal:content-core fill-slot="content-core">
<metal:main_macro define-macro="content-core">

    <h2>計測データ</h2>


    <div id="visualization"></div>

    <div class="visualClear"><!-- --></div>

    <div tal:replace="structure view/get_param"><!----></div>

    <script type="text/javascript">

        var container = document.getElementById('visualization');

        let names = ['Temperature(c)', 'Pressure(hPa)', 'Humidity(%)'];

        let items = [];
        let mlkDs = MilkCocoa.connectWithApiKey(app_id, app_key, app_pass);

        mlkDs.dataStore(app_ds).stream().size(500).sort('desc').next(function (err, data) {
            data.forEach(function (d, i) {
                //if (d.value.name == 'nagai') {
                    addItem(d.timestamp, d.value.temperature, 0);
                    addItem(d.timestamp, d.value.pressure, 1);
                    addItem(d.timestamp, d.value.humidity, 2);
                //}
            });
            makeGraph();
        });

        function addItem(timestamp, value, g) {
            itm = { x: new Date(timestamp).toLocaleString(), y: value, group: g };
            items.push(itm);
        }

        function makeGraph() {
            let groups = new vis.DataSet();
            groups.add({
                id: 0,
                content: names[0],
                className: 'custom-style1',
                options: {
                    drawPoints: {
                        size: 1
                    }
                }
            });

            groups.add({
                id: 1,
                content: names[1],
                className: 'custom-style2',
                options: {
                    yAxisOrientation: 'right',
                    drawPoints: {
                        size: 1
                    }
                }
            });

            groups.add({
                id: 2,
                content: names[2],
                className: 'custom-style3',
                options: {
                    drawPoints: {
                        size: 1
                    }
                }
            });

            let dataset = new vis.DataSet(items);
            let date = new Date();
            let options = {
                dataAxis: {
                    showMinorLabels: true,
                    alignZeros: false
                },
                width: '100%',
                height: '550px',
                legend: { left: { position: "bottom-left" } },
                start: date.setMinutes(date.getMinutes() - 30),
                end: date.setMinutes(date.getMinutes() + 60)

            };
            let graph2d = new vis.Graph2d(container, dataset, groups, options);
        }

    </script>




</metal:main_macro>
</metal:content-core>

</body>
</html>
